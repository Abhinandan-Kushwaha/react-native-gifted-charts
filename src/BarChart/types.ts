import {ColorValue,View,StyleProp,TextStyle} from 'react-native';
import {stackItemType} from '../BarChart/RenderStackBars'

export type BarChartPropsType = {
    width?: number;
    height?: number;
    minHeight?: number;
    noOfSections?: number;
    noOfSectionsBelowXAxis?: number;
    maxValue?: number;
    minValue?: number;
    stepHeight?: number;
    stepValue?: number;
    spacing?: number;
    data?: Array<itemType>;
    stackData?: Array<stackItemType>;
    side?: String;
    rotateLabel?: Boolean;
    isAnimated?: Boolean;
    animationDuration?: number;
    // animationEasing?: any;
    opacity?: number;
    isThreeD?: Boolean;
    xAxisLength?: number;
    xAxisThickness?: number;
    xAxisColor?: ColorValue;
    yAxisThickness?: number;
    yAxisColor?: ColorValue;
    xAxisType?: String;
    yAxisLabelContainerStyle?: any;
    horizontalRulesStyle?: any;
    yAxisTextStyle?: any;
    yAxisTextNumberOfLines?: number;
    xAxisTextNumberOfLines?: number;
    yAxisLabelWidth?: number;
    hideYAxisText?: Boolean;
    yAxisSide?: string;
    yAxisOffset?: number;
    initialSpacing?: number;
    endSpacing?: number;
    barWidth?: number;
    sideWidth?: number;
    showLine?: Boolean;
    lineData?: any;
    lineConfig?: lineConfigType;
    lineBehindBars?: boolean;
  
    cappedBars?: Boolean;
    capThickness?: number;
    capColor?: ColorValue;
    capRadius?: number;
  
    hideAxesAndRules?: Boolean;
    hideRules?: Boolean;
    rulesLength?: number;
    rulesColor?: ColorValue;
    rulesThickness?: number;
    rulesType?: String;
    dashWidth?: number;
    dashGap?: number;
    showReferenceLine1?: Boolean;
    referenceLine1Config?: referenceConfigType;
    referenceLine1Position?: number;
    showReferenceLine2?: Boolean;
    referenceLine2Config?: referenceConfigType;
    referenceLine2Position?: number;
    showReferenceLine3?: Boolean;
    referenceLine3Config?: referenceConfigType;
    referenceLine3Position?: number;
    showVerticalLines?: Boolean;
    verticalLinesThickness?: number;
    verticalLinesHeight?: number;
    verticalLinesColor?: ColorValue;
    verticalLinesZIndex?: number;
    noOfVerticalLines?: number;
    verticalLinesSpacing?: number;
  
    showYAxisIndices?: Boolean;
    showXAxisIndices?: Boolean;
    yAxisIndicesHeight?: number;
    xAxisIndicesHeight?: number;
    yAxisIndicesWidth?: number;
    xAxisIndicesWidth?: number;
    xAxisIndicesColor?: ColorValue;
    yAxisIndicesColor?: ColorValue;
  
    showFractionalValues?: Boolean;
    roundToDigits?: number;
    backgroundColor?: ColorValue;
  
    disableScroll?: Boolean;
    showScrollIndicator?: boolean;
    indicatorColor?: 'black' | 'default' | 'white';
    roundedTop?: Boolean;
    roundedBottom?: Boolean;
    disablePress?: boolean;
  
    frontColor?: ColorValue;
    color?: ColorValue;
    sideColor?: ColorValue;
    topColor?: ColorValue;
    gradientColor?: ColorValue;
    showGradient?: Boolean;
    activeOpacity?: number;
  
    horizontal?: Boolean;
    yAxisAtTop?: Boolean;
  
    intactTopLabel?: Boolean;
  
    horizSections?: Array<sectionType>;
    barBorderRadius?: number;
    hideOrigin?: Boolean;
    labelWidth?: number;
    yAxisLabelTexts?: Array<string>;
    xAxisLabelTexts?: Array<string>;
    xAxisLabelTextStyle?: any;
    yAxisLabelPrefix?: String;
    yAxisLabelSuffix?: String;
    autoShiftLabels?: Boolean;
    scrollToEnd?: Boolean;
    scrollAnimation?: Boolean;
    labelsExtraHeight?: number;
    barBackgroundPattern?: Function;
    patternId?: String;
    barMarginBottom?: number;
    onPress?: Function;
    renderTooltip?: Function;
    leftShiftForTooltip?: number;
    leftShiftForLastIndexTooltip?: number;
    barStyle?: object;
  };
  type lineConfigType = {
    initialSpacing?: number;
    curved?: Boolean;
    isAnimated?: Boolean;
    delay?: number;
    thickness?: number;
    color?: ColorValue | String | any;
    hideDataPoints?: Boolean;
    dataPointsShape?: String;
    dataPointsWidth?: number;
    dataPointsHeight?: number;
    dataPointsColor?: ColorValue | String | any;
    dataPointsRadius?: number;
    textColor?: ColorValue | String | any;
    textFontSize?: number;
    textShiftX?: number;
    textShiftY?: number;
    shiftY?: number;
    startIndex?: number;
    endIndex?: number;
    showArrow?: boolean;
    arrowConfig?: arrowType;
    customDataPoint?: Function;
  };
  export type defaultLineConfigType = {
    initialSpacing: number;
    curved: Boolean;
    isAnimated: Boolean;
    delay: number;
    thickness: number;
    color: ColorValue | String | any;
    hideDataPoints: Boolean;
    dataPointsShape: String;
    dataPointsWidth: number;
    dataPointsHeight: number;
    dataPointsColor: ColorValue | String | any;
    dataPointsRadius: number;
    textColor: ColorValue | String | any;
    textFontSize: number;
    textShiftX: number;
    textShiftY: number;
    shiftY: number;
    startIndex: number;
    endIndex: number;
    showArrow: boolean;
    arrowConfig: arrowType;
    customDataPoint?: Function;
  };
  type arrowType = {
    length?: number;
    width?: number;
    strokeWidth?: number;
    strokeColor?: string;
    fillColor?: string;
    showArrowBase?: boolean;
  };
  type referenceConfigType = {
    thickness: number;
    width: number;
    color: ColorValue | String | any;
    type: String;
    dashWidth: number;
    dashGap: number;
    labelText: String;
    labelTextStyle: any;
  };
  type sectionType = {
    value: string;
  };
  export type itemType = {
    value: number;
    onPress?: any;
    frontColor?: ColorValue;
    sideColor?: ColorValue;
    topColor?: ColorValue;
    showGradient?: Boolean;
    gradientColor?: any;
    label?: String;
    barWidth?: number;
    sideWidth?: number;
    labelTextStyle?: any;
    topLabelComponent?: Function;
    topLabelContainerStyle?: any;
    disablePress?: any;
    labelComponent?: View;
    spacing?: number;
    barBackgroundPattern?: Function;
    patternId?: String;
    barStyle?: object;
  };